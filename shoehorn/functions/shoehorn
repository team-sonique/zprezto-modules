#function shoehorn {
    local goal version env app

    if [ -z "$1" ]; then
        echo "Usage: $0 {deploy|start|stop|status|clean} application [version] [environment]"
        return 1
    else
        goal="$1"
    fi

    if [ -z "$2" ]; then
        echo "Usage: ${goal} application [version] [environment]"
        return 1
    else
        app="$2"
    fi

    if [ -z "$3" ]; then
        version="$(_get_latest_version ${app})"
    else
        version="$3"
    fi

    if [ -z "$4" ]; then
        env="dev"
    else
        env="$4"
    fi

    local app_dir="/data/apps/${app}/${env}-${version}"

    if [ ${goal} = "deploy" ]; then
        if [ -d ${app_dir} ]; then
            echo "${app} [${env}-${version}] already deployed at ${app_dir}, skipping"
            return 0
        fi

        local isInDockerRepo
        echo "checking docker repo for ${app}..."
        isInDockerRepo="$(_is_in_docker_repo ${app})"
        if [ $? -eq 0 ]; then
            _run_shoehorn shoehorn.docker.ShoehornDockerWrapper -app ${app} -compositeVersion ${version} -environment ${env}
        else
            _run_shoehorn shoehorn.pipeline.ShoehornWrapper -app ${app} -compositeVersion ${version} -environment ${env}
        fi

        return $?
    fi

    local isDockerImage
    isDockerImage="$(_is_docker_image ${app})"
    if [ $? -eq 0 ]; then
        case ${goal} in
            start)
                _start_docker_app ${app}
                return 0
                ;;
            stop)
                _stop_docker_app ${app}
                return 0;
                ;;
            clean)
                _clean_docker_app ${app} ${app_dir}
                return 0;
                ;;
            status)
                _status_docker_app ${app}
                return 0
                ;;
        esac
    else
        if [ ! -d ${app_dir} ]; then
            echo "No ${app} [${env}-${version}] found"
            return 2
        fi
        case ${goal} in
            start)
                ${app_dir}/start.sh
                ;;
            stop)
                ${app_dir}/stop.sh
                ;;
            status)
                ${app_dir}/status.sh
                ;;
            clean)
                local status_script="${app_dir}/status.sh"
                if [ -f ${status_script} ]; then
                    ${status_script} -p 1>/dev/null
                    local exit_code=$?
                else
                    local exit_code=255
                fi

                if [ ${exit_code} = 0 ]; then
                    echo "Cannot clean ${app} [${env}-${version}] while it's running"
                else
                    local log_dir="/logs/apps/${app}/${env}-${version}"
                    rm -rf ${app_dir} ${log_dir} && echo "Cleaned ${app} [${env}-${version}]"
                fi
                ;;
            *)
                echo "Usage: $0 {deploy|start|stop|status|clean}"
                return 1
                ;;
        esac
    fi
#}
